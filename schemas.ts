/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable()
);

export const publicExerciseRepsRowSchema = z.object({
  completed_at: z.string().nullable(),
  duration_seconds: z.number().nullable(),
  id: z.string(),
  rep_number: z.number(),
  session_id: z.string().nullable(),
  started_at: z.string().nullable(),
});

export const publicExerciseRepsInsertSchema = z.object({
  completed_at: z.string().optional().nullable(),
  duration_seconds: z.number().optional().nullable(),
  id: z.string().optional(),
  rep_number: z.number(),
  session_id: z.string().optional().nullable(),
  started_at: z.string().optional().nullable(),
});

export const publicExerciseRepsUpdateSchema = z.object({
  completed_at: z.string().optional().nullable(),
  duration_seconds: z.number().optional().nullable(),
  id: z.string().optional(),
  rep_number: z.number().optional(),
  session_id: z.string().optional().nullable(),
  started_at: z.string().optional().nullable(),
});

export const publicExerciseRepsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("exercise_reps_session_id_fkey"),
    columns: z.tuple([z.literal("session_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("exercise_sessions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicExerciseSessionsRowSchema = z.object({
  completed_at: z.string().nullable(),
  exercise_id: z.string().nullable(),
  id: z.string(),
  started_at: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const publicExerciseSessionsInsertSchema = z.object({
  completed_at: z.string().optional().nullable(),
  exercise_id: z.string().optional().nullable(),
  id: z.string().optional(),
  started_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const publicExerciseSessionsUpdateSchema = z.object({
  completed_at: z.string().optional().nullable(),
  exercise_id: z.string().optional().nullable(),
  id: z.string().optional(),
  started_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const publicExerciseSessionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("exercise_sessions_exercise_id_fkey"),
    columns: z.tuple([z.literal("exercise_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("exercises"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicExercisesRowSchema = z.object({
  created_at: z.string().nullable(),
  id: z.string(),
  instructions: z.string(),
  media_url: z.string().nullable(),
  name: z.string(),
  slug: z.string(),
});

export const publicExercisesInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  instructions: z.string(),
  media_url: z.string().optional().nullable(),
  name: z.string(),
  slug: z.string(),
});

export const publicExercisesUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  instructions: z.string().optional(),
  media_url: z.string().optional().nullable(),
  name: z.string().optional(),
  slug: z.string().optional(),
});
